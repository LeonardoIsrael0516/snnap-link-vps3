import { Request, Response, NextFunction } from 'express';
import { prisma } from '../config/database';
import { PrismaClient } from '@prisma/client';

// Cliente para o banco principal
const mainDbPrisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.MAIN_DATABASE_URL
    }
  }
});

interface AuthRequest extends Request {
  user?: {
    userId: string;
    email: string;
    role: string;
  };
}

/**
 * Middleware para garantir que o usu√°rio existe no banco do microservi√ßo
 * Se n√£o existir, sincroniza do banco principal automaticamente
 */
export const ensureUserExists = async (req: AuthRequest, res: Response, next: NextFunction) => {
  try {
    console.log('üîÑ Middleware ensureUserExists chamado');
    
    if (!req.user?.userId) {
      console.log('‚ö†Ô∏è Nenhum userId encontrado na requisi√ß√£o');
      return next();
    }

    const userId = req.user.userId;
    console.log(`üë§ Verificando usu√°rio: ${userId}`);

    // Verificar se usu√°rio existe no banco local (por ID ou email)
    const userExists = await prisma.user.findFirst({
      where: {
        OR: [
          { id: userId },
          { email: req.user.email }
        ]
      }
    });

    console.log(`üîç Busca no banco local - userId: ${userId}, email: ${req.user.email}`);
    console.log(`üîç Usu√°rio encontrado:`, userExists ? { id: userExists.id, email: userExists.email } : 'Nenhum');

    if (userExists) {
      // Usu√°rio j√° existe, continuar
      console.log(`‚úÖ Usu√°rio j√° existe no banco local: ${userExists.email} (ID: ${userExists.id})`);
      return next();
    }

    // Usu√°rio N√ÉO existe no banco local, sincronizar do banco principal
    console.log(`üîÑ Usu√°rio ${userId} n√£o encontrado no banco local, sincronizando...`);

    try {
      console.log('üîç Conectando ao banco principal...');
      console.log('üîç MAIN_DATABASE_URL configurada:', process.env.MAIN_DATABASE_URL ? 'SIM' : 'N√ÉO');
      
      // Testar conectividade com o banco principal
      try {
        await mainDbPrisma.$connect();
        console.log('‚úÖ Conex√£o com banco principal estabelecida');
      } catch (connectError) {
        console.error('‚ùå Erro ao conectar com banco principal:', connectError);
        throw connectError;
      }
      
      // Buscar usu√°rio do banco principal
      const mainUser = await mainDbPrisma.user.findUnique({
        where: { id: userId },
        select: {
          id: true,
          name: true,
          email: true,
          emailVerified: true,
          image: true,
          role: true,
          createdAt: true,
          updatedAt: true,
        }
      });

      console.log('üîç Usu√°rio encontrado no banco principal:', mainUser ? { id: mainUser.id, email: mainUser.email } : 'Nenhum');

      if (!mainUser) {
        console.error(`‚ùå Usu√°rio ${userId} n√£o encontrado nem no banco principal!`);
        return res.status(404).json({ 
          error: 'Usu√°rio n√£o encontrado. Fa√ßa login novamente.' 
        });
      }

      // Criar ou atualizar usu√°rio no banco local
      console.log('üîÑ Criando/atualizando usu√°rio no banco local...');
      const upsertedUser = await prisma.user.upsert({
        where: { id: mainUser.id },
        update: {
          name: mainUser.name,
          email: mainUser.email,
          emailVerified: mainUser.emailVerified,
          image: mainUser.image,
          role: mainUser.role,
          updatedAt: mainUser.updatedAt,
        },
        create: {
          id: mainUser.id,
          name: mainUser.name,
          email: mainUser.email,
          emailVerified: mainUser.emailVerified,
          image: mainUser.image,
          role: mainUser.role,
          createdAt: mainUser.createdAt,
          updatedAt: mainUser.updatedAt,
        }
      });
      console.log('‚úÖ Usu√°rio criado/atualizado no banco local:', { id: upsertedUser.id, email: upsertedUser.email });

      console.log(`‚úÖ Usu√°rio ${mainUser.email} sincronizado com sucesso!`);
      
      // Verificar se a sincroniza√ß√£o foi bem-sucedida
      const verifyUser = await prisma.user.findUnique({
        where: { id: userId }
      });
      
      if (!verifyUser) {
        console.error(`‚ùå Falha na verifica√ß√£o p√≥s-sincroniza√ß√£o do usu√°rio ${userId}`);
        return res.status(500).json({ 
          error: 'Erro na sincroniza√ß√£o de usu√°rio. Tente novamente.' 
        });
      }
      
      console.log(`‚úÖ Usu√°rio ${userId} verificado ap√≥s sincroniza√ß√£o`);
      next();

    } catch (syncError) {
      console.error('‚ùå Erro ao sincronizar usu√°rio:', syncError);
      console.error('‚ùå Tipo do erro:', typeof syncError);
      console.error('‚ùå Mensagem do erro:', syncError instanceof Error ? syncError.message : 'Erro desconhecido');
      console.error('‚ùå Stack do erro:', syncError instanceof Error ? syncError.stack : 'Sem stack');
      
      // Se for erro de duplica√ß√£o (j√° existe), ignorar e continuar
      if (syncError instanceof Error && syncError.message.includes('Unique constraint')) {
        console.log('‚ÑπÔ∏è  Usu√°rio j√° existe (race condition), continuando...');
        return next();
      }
      
      return res.status(500).json({ 
        error: 'Erro de sincroniza√ß√£o de usu√°rio. Tente novamente.' 
      });
    }

  } catch (error) {
    console.error('‚ùå Erro no middleware de sincroniza√ß√£o:', error);
    next(); // Continuar mesmo com erro para n√£o quebrar a aplica√ß√£o
  }
};







