import { PrismaClient } from '@prisma/client';

// Usar o banco principal onde est√£o os planos e cr√©ditos
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.MAIN_DATABASE_URL
    }
  }
});

export interface CreditCost {
  PAGE_CREATION_SMALL: number;
  PAGE_CREATION_LARGE: number;
  PAGE_EDIT: number;
  TEMPLATE_IMPORT: number;
}

export const CREDIT_COSTS: CreditCost = {
  PAGE_CREATION_SMALL: 2,   // Cria√ß√£o de p√°gina nova (sempre 2 cr√©ditos)
  PAGE_CREATION_LARGE: 2,   // Cria√ß√£o de p√°gina nova (sempre 2 cr√©ditos)
  PAGE_EDIT: 1.4,           // Edi√ß√µes de p√°gina (1.4 cr√©ditos)
  TEMPLATE_IMPORT: 1        // Importa√ß√£o de templates (1 cr√©dito)
};

/**
 * Verifica se o usu√°rio tem cr√©ditos suficientes
 */
export async function hasCredits(userId: string, requiredCredits: number): Promise<boolean> {
  try {
    console.log(`üîç hasCredits - Verificando cr√©ditos para usu√°rio ${userId}, necess√°rio: ${requiredCredits}`);
    
    const userPlan = await (prisma as any).userPlan.findUnique({
      where: { userId }
    });

    if (!userPlan) {
      console.log(`‚ùå hasCredits - Usu√°rio ${userId} n√£o possui plano`);
      return false;
    }

    if (userPlan.status !== 'ACTIVE') {
      console.log(`‚ùå hasCredits - Plano do usu√°rio ${userId} n√£o est√° ativo (status: ${userPlan.status})`);
      return false;
    }

    const hasEnough = userPlan.creditsAvailable >= requiredCredits;
    console.log(`‚úÖ hasCredits - Usu√°rio ${userId}: ${userPlan.creditsAvailable} cr√©ditos dispon√≠veis, necess√°rio: ${requiredCredits}, resultado: ${hasEnough}`);
    
    return hasEnough;
  } catch (error) {
    console.error('‚ùå hasCredits - Erro ao verificar cr√©ditos:', error);
    return false;
  }
}

/**
 * Verifica o status detalhado do usu√°rio para determinar qual modal mostrar
 */
export async function checkUserCreditStatus(userId: string, requiredCredits: number): Promise<{
  hasCredits: boolean;
  hasActivePlan: boolean;
  isFreePlan: boolean;
  availableCredits: number;
  requiredCredits: number;
  planName: string;
  status: 'NO_PLAN' | 'NO_CREDITS' | 'SUFFICIENT_CREDITS';
  message: string;
}> {
  try {
    console.log(`üîç checkUserCreditStatus - Verificando status detalhado para usu√°rio ${userId}, necess√°rio: ${requiredCredits}`);
    
    const userPlan = await (prisma as any).userPlan.findUnique({
      where: { userId },
      include: {
        plan: true
      }
    });

    if (!userPlan) {
      console.log(`‚ùå checkUserCreditStatus - Usu√°rio ${userId} n√£o possui plano`);
      return {
        hasCredits: false,
        hasActivePlan: false,
        isFreePlan: true,
        availableCredits: 0,
        requiredCredits,
        planName: 'Nenhum',
        status: 'NO_PLAN',
        message: 'Usu√°rio n√£o possui plano ativo'
      };
    }

    if (userPlan.status !== 'ACTIVE') {
      console.log(`‚ùå checkUserCreditStatus - Plano do usu√°rio ${userId} n√£o est√° ativo (status: ${userPlan.status})`);
      return {
        hasCredits: false,
        hasActivePlan: false,
        isFreePlan: userPlan.plan?.name === 'Free',
        availableCredits: userPlan.creditsAvailable,
        requiredCredits,
        planName: userPlan.plan?.name || 'Desconhecido',
        status: 'NO_PLAN',
        message: 'Plano n√£o est√° ativo'
      };
    }

    const hasEnoughCredits = userPlan.creditsAvailable >= requiredCredits;
    const isFreePlan = userPlan.plan?.name === 'Free';

    if (hasEnoughCredits) {
      console.log(`‚úÖ checkUserCreditStatus - Usu√°rio ${userId} tem cr√©ditos suficientes`);
      return {
        hasCredits: true,
        hasActivePlan: true,
        isFreePlan,
        availableCredits: userPlan.creditsAvailable,
        requiredCredits,
        planName: userPlan.plan?.name || 'Desconhecido',
        status: 'SUFFICIENT_CREDITS',
        message: 'Cr√©ditos suficientes'
      };
    } else {
      console.log(`‚ö†Ô∏è checkUserCreditStatus - Usu√°rio ${userId} tem plano ativo mas sem cr√©ditos suficientes`);
      return {
        hasCredits: false,
        hasActivePlan: true,
        isFreePlan,
        availableCredits: userPlan.creditsAvailable,
        requiredCredits,
        planName: userPlan.plan?.name || 'Desconhecido',
        status: 'NO_CREDITS',
        message: `Cr√©ditos insuficientes. Dispon√≠vel: ${userPlan.creditsAvailable}, Necess√°rio: ${requiredCredits}`
      };
    }
  } catch (error) {
    console.error('‚ùå checkUserCreditStatus - Erro ao verificar status:', error);
    return {
      hasCredits: false,
      hasActivePlan: false,
      isFreePlan: true,
      availableCredits: 0,
      requiredCredits,
      planName: 'Erro',
      status: 'NO_PLAN',
      message: 'Erro ao verificar status do usu√°rio'
    };
  }
}

/**
 * Consome cr√©ditos do usu√°rio
 */
export async function consumeCredits(
  userId: string,
  amount: number,
  type: 'PAGE_CREATION' | 'PAGE_EDIT' | 'TEMPLATE_IMPORT',
  description: string,
  reference?: string
): Promise<{ success: boolean; message: string; newBalance?: number }> {
  try {
    console.log(`üí∞ consumeCredits - Consumindo ${amount} cr√©ditos para usu√°rio ${userId}, tipo: ${type}`);
    
    const userPlan = await (prisma as any).userPlan.findUnique({
      where: { userId }
    });

    if (!userPlan) {
      console.log(`‚ùå consumeCredits - Usu√°rio ${userId} n√£o possui plano`);
      return { success: false, message: 'Usu√°rio n√£o possui plano ativo' };
    }

    if (userPlan.status !== 'ACTIVE') {
      console.log(`‚ùå consumeCredits - Plano do usu√°rio ${userId} n√£o est√° ativo (status: ${userPlan.status})`);
      return { success: false, message: 'Plano n√£o est√° ativo' };
    }

    if (userPlan.creditsAvailable < amount) {
      console.log(`‚ùå consumeCredits - Usu√°rio ${userId} n√£o tem cr√©ditos suficientes (${userPlan.creditsAvailable} < ${amount})`);
      return { success: false, message: 'Cr√©ditos insuficientes' };
    }

    console.log(`üîÑ consumeCredits - Atualizando cr√©ditos do usu√°rio ${userId}...`);
    
    // Atualizar cr√©ditos do usu√°rio
    const updatedUserPlan = await (prisma as any).userPlan.update({
      where: { userId },
      data: {
        creditsAvailable: userPlan.creditsAvailable - amount,
        creditsUsed: userPlan.creditsUsed + amount
      }
    });

    console.log(`‚úÖ consumeCredits - Cr√©ditos atualizados: ${updatedUserPlan.creditsAvailable} dispon√≠veis`);

    // Registrar transa√ß√£o
    await (prisma as any).creditTransaction.create({
      data: {
        userId,
        type,
        amount: -amount,
        balance: updatedUserPlan.creditsAvailable,
        description,
        reference
      }
    });

    console.log(`‚úÖ consumeCredits - Transa√ß√£o registrada para usu√°rio ${userId}`);

    return {
      success: true,
      message: 'Cr√©ditos consumidos com sucesso',
      newBalance: updatedUserPlan.creditsAvailable
    };
  } catch (error) {
    console.error('Erro ao consumir cr√©ditos:', error);
    return { success: false, message: 'Erro ao processar cr√©ditos' };
  }
}

/**
 * Calcula custo de cr√©ditos para cria√ß√£o de p√°gina (sempre 2 cr√©ditos)
 */
export function calculatePageCreationCost(htmlContent: string): number {
  // Cria√ß√£o de p√°gina sempre custa 2 cr√©ditos
  return CREDIT_COSTS.PAGE_CREATION_SMALL;
}

/**
 * Calcula custo de cr√©ditos para edi√ß√£o de p√°gina (sempre 1.4 cr√©ditos)
 */
export function calculatePageEditCost(htmlContent: string): number {
  // Edi√ß√£o de p√°gina sempre custa 1.4 cr√©ditos
  return CREDIT_COSTS.PAGE_EDIT;
}

/**
 * Verifica permiss√µes do plano do usu√°rio
 */
export async function checkPlanPermission(userId: string) {
  try {
    const userPlan = await (prisma as any).userPlan.findUnique({
      where: { userId },
      include: {
        plan: true
      }
    });

    if (!userPlan) {
      return {
        hasActivePlan: false,
        canCreatePages: false,
        customDomainsLimit: 0,
        customDomainsUsed: 0,
        canCreateMoreDomains: false,
        pwaEnabled: false
      };
    }

    // Contar dom√≠nios personalizados do usu√°rio
    const customDomainsUsed = await prisma.customDomain.count({
      where: { userId }
    });

    const customDomainsLimit = userPlan.plan.customDomainsLimit;
    const canCreateMoreDomains = customDomainsLimit === -1 || customDomainsUsed < customDomainsLimit;

    return {
      hasActivePlan: userPlan.status === 'ACTIVE',
      canCreatePages: userPlan.creditsAvailable > 0,
      customDomainsLimit,
      customDomainsUsed,
      canCreateMoreDomains,
      pwaEnabled: userPlan.plan.pwaEnabled,
      creditsAvailable: userPlan.creditsAvailable
    };
  } catch (error) {
    console.error('Erro ao verificar permiss√µes:', error);
    return {
      hasActivePlan: false,
      canCreatePages: false,
      customDomainsLimit: 0,
      customDomainsUsed: 0,
      canCreateMoreDomains: false,
      pwaEnabled: false
    };
  }
}
